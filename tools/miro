#!/usr/bin/env bash
#
# miro - unified wrapper command
# Swiss army knife of the MiRo Developer Kit

set -euo pipefail
IFS=$'\n\t'

# ----------------------
# Colours
# ----------------------
info()    { echo -e "\033[1;33m$*\033[0m"; }   # Yellow
success() { echo -e "\033[0;32m$*\033[0m"; }   # Green
error()   { echo -e "\033[0;31m$*\033[0m"; }   # Red

# ----------------------
# Pre-flight checks
# ----------------------
: "${MIRO_DIR_MDK:?Environment variable MIRO_DIR_MDK not set}"
: "${MIRO_DIR_SHARE:?Environment variable MIRO_DIR_SHARE not set}"
: "${MIRO_USER_SETUP:?Environment variable MIRO_USER_SETUP not set}"
: "${MIRO_NETWORK_MODE:?Environment variable MIRO_NETWORK_MODE not set}"
: "${MIRO_DIR_CONFIG:?Environment variable MIRO_DIR_CONFIG not set}"

# ----------------------
# Helper functions
# ----------------------
confirm() {
    read -rp "$1 [y/N]: " response
    case "$response" in
        [yY][eE][sS]|[yY]) return 0 ;;
        *) return 1 ;;
    esac
}

update_conf_line() {
    local VAR="$1" VAL="$2"
    if grep -q "^export $VAR=" "$MIRO_USER_SETUP"; then
        sed -i "s|^export $VAR=.*|export $VAR=$VAL|" "$MIRO_USER_SETUP"
    fi
}

get_host_ip() {
    local ip="" iface=""

    # Try Wi-Fi interfaces first (common on laptops)
    iface=$(ip -o link show | awk -F: '/wlp/ {print $2; exit}' | tr -d ' ')
    [[ -z "$iface" ]] && iface=$(ip -o link show | awk -F: '/wlan/ {print $2; exit}' | tr -d ' ')

    # Fallback: wired ethernet
    [[ -z "$iface" ]] && iface=$(ip -o link show | awk -F: '/eth/ {print $2; exit}' | tr -d ' ')

    # Fallback: Docker bridge or similar
    [[ -z "$iface" ]] && iface=$(ip -o link show | awk -F: '/br-/ {print $2; exit}' | tr -d ' ')

    # Try to get IPv4 address for chosen interface
    if [[ -n "$iface" ]]; then
        ip=$(ip -o -4 addr show dev "$iface" 2>/dev/null | awk '{print $4}' | cut -d/ -f1 | head -n1)
    fi

    # Fallback: default routeâ€™s source address
    [[ -z "${ip:-}" ]] && ip=$(ip route get 1.1.1.1 2>/dev/null | awk '/src/ {print $7; exit}')

    # Fallback: hostname-based lookup (may be 127.0.1.1)
    [[ -z "${ip:-}" ]] && ip=$(hostname -I 2>/dev/null | awk '{print $1}')

    # Final fallback
    [[ -z "${ip:-}" ]] && ip="127.0.0.1"

    echo "$ip"
}

switch_mode() {
    local mode="$1"
    local network_mode="$2"
    local ip

    update_conf_line "MIRO_NETWORK_MODE" "$network_mode"
    export MIRO_NETWORK_MODE="$network_mode"

    if [[ "$mode" == "robot" ]]; then
        ip=$(get_host_ip)
        update_conf_line "MIRO_STATIC_IP" "$ip"
        export MIRO_STATIC_IP="$ip"
        echo "robot" > ${MIRO_DIR_CONFIG}/miro-mode
    else
        echo "sim" > ${MIRO_DIR_CONFIG}/miro-mode
    fi

    success "Mode switched to: $mode."
}

run_gui() {
    pushd "$MIRO_DIR_MDK/bin/shared" > /dev/null
    ./client_gui.py
    popd > /dev/null
}

run_sim() {
    local sim_type="${1:-full}"

    case "$sim_type" in
        light|full)
            pushd "$MIRO_DIR_MDK/sim" > /dev/null
            if [[ "$sim_type" == "light" ]]; then
                ./launch_sim.sh
            else
                ./launch_full.sh
            fi
            popd > /dev/null
            ;;
        *)
            error "Valid arguments are: light, full" >&2
            exit 1
            ;;
    esac
}

run_ws() {
    local ws_arg="${1:-}"

    case "$ws_arg" in
        build)
            pushd "$MIRO_DIR_MDK/catkin_ws" > /dev/null
            catkin build
            pushd build/miro2_msg > /dev/null
            make install
            popd > /dev/null
            popd > /dev/null
            ;;
        clean)
            pushd "$MIRO_DIR_MDK/catkin_ws" > /dev/null
            catkin clean
            popd > /dev/null
            ;;
        "")
            info "To enter the MiRo workspace, run: cd \"$MIRO_DIR_MDK/catkin_ws/src\""
            ;;
        *)
            error "Invalid workspace argument: $ws_arg. Valid: build, clean" >&2
            exit 1
            ;;
    esac
}

run_demo() {
    pushd "$MIRO_DIR_SHARE/python/miro2/core/" > /dev/null || exit 1

    if [[ $# -gt 1 ]]; then
        error "Usage: run_demo [caml|camr|mics]"
        popd > /dev/null
        exit 1
    elif [[ $# -eq 0 ]]; then
        python3 client_demo.py
    elif [[ "$1" == "caml" || "$1" == "camr" || "$1" == "mics" ]]; then
        python3 client_demo.py - "$1"
    else
        error "Invalid demo argument: $1"
        popd > /dev/null
        exit 1
    fi
}

run_dashboard() {
    python3 "$MIRO_DIR_SHARE/python/miro2/dashboard/miro_dashboard.py"
}

show_help() {
    cat <<'EOF'
Usage: miro <command> [argument]

Commands:

  gui
      Launch the MiRo GUI client.

  mode {robot|sim}
      Show or switch the current operation mode.
      - robot: static network mode, working with physical MiRo
      - sim: loopback network mode, working with simulator

  ip [update]
      Show the current MiRo robot IP. Use 'update' to change it.
      Has no effect in `miro mode sim`.

  sim [light|full]
      Launch MiRo simulation in Gazebo.
      - Default: full
      - light: no Gazebo-ROS bridge, less output, no extra assetsS

  ws [build|clean]
      Show the path to the MDK catkin workspace.
      - Optional arguments: build, clean

  demo [arguments...]
      Launches MiRo in autonomous (demo) mode.
      Optional arguments enable additional features:
          camr  - activate right camera
          caml  - activate left camera
          mics  - activate microphones

  dashboard
      Visualisation for the MiRo demo mode.

  name [update]
      Show the current robot name. Use 'update' to change it.

  status
      Show a summary of current MiRo environment.
EOF
}

# ----------------------
# Main
# ----------------------
COMMAND="${1:-}"

case "$COMMAND" in

    gui) run_gui ;;

    mode)
        MODE_ARG="${2:-}"
        if [[ -z "$MODE_ARG" ]]; then
            info "Current mode: $MIRO_NETWORK_MODE"
        elif [[ "$MODE_ARG" == "robot" || "$MODE_ARG" == "sim" ]]; then
            network_mode=""
            [[ "$MODE_ARG" == "robot" ]] && network_mode="static" || network_mode="loopback"
            switch_mode "$MODE_ARG" "$network_mode"
        else
            error "Invalid mode argument: $MODE_ARG. Valid: robot, sim"
            exit 1
        fi
        ;;

    ip)
        if [[ "${2:-}" == "update" ]]; then
            read -rp "Enter new robot IP: " NEW_IP
            export MIRO_ROBOT_IP="$NEW_IP"
            echo "$NEW_IP" > "${MIRO_DIR_CONFIG}/miro-robot-ip"
            success "Updated MIRO_ROBOT_IP to $NEW_IP"
        else
            info "Current MIRO_ROBOT_IP=${MIRO_ROBOT_IP:-unset}"
        fi
        ;;

    sim) run_sim "${2:-full}" ;;

    ws) run_ws "${2:-}" ;;

    demo)
        shift
        run_demo "$@"
        ;;

    dashboard) run_dashboard ;;

    name)
        if [[ "${2:-}" == "update" ]]; then
            read -rp "Enter new robot name: " NEW_NAME
            export MIRO_ROBOT_NAME="$NEW_NAME"
            update_conf_line "MIRO_ROBOT_NAME" "$NEW_NAME"
            success "Updated robot name to $NEW_NAME"
        else
            info "Current robot name: ${MIRO_ROBOT_NAME:-unset}"
        fi
        ;;

    status)
        info "MiRo Status:"
        echo "  Mode: $MIRO_NETWORK_MODE"
        echo "  Host IP: ${MIRO_STATIC_IP:-unset}"
        echo "  Robot IP: ${MIRO_ROBOT_IP:-unset}"
        echo "  Robot Name: ${MIRO_ROBOT_NAME:-unset}"
        ;;

    ""|-h|--help) show_help ;;

    *)
        error "Unknown command: $COMMAND"
        show_help
        exit 1
        ;;
esac
