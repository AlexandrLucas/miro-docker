#!/usr/bin/env bash
# Bash completion for the MiRo wrapper command

# <TAB> Completion function
_miro_completion() {
    local cur prev cmd
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd="${COMP_WORDS[1]}"

    # --- Top-level commands ---
    local commands="gui mode ip sim ws demo dashboard name status"

    # --- Subcommand argument sets ---
    local mode_args="robot sim"
    local sim_args="light full"
    local ws_args="build clean"
    local demo_args="camr caml mics"
    local ip_args="update"
    local name_args="update"

    # --- If completing first argument, list all commands ---
    if [[ $COMP_CWORD -eq 1 ]]; then
        COMPREPLY=( $(compgen -W "$commands" -- "$cur") )
        return
    fi

    # --- Subcommand-specific completions ---
    case "$cmd" in
        mode)
            COMPREPLY=( $(compgen -W "$mode_args" -- "$cur") )
            ;;
        sim)
            COMPREPLY=( $(compgen -W "$sim_args" -- "$cur") )
            ;;
        ws)
            COMPREPLY=( $(compgen -W "$ws_args" -- "$cur") )
            ;;
        demo)
            COMPREPLY=( $(compgen -W "$demo_args" -- "$cur") )
            ;;
        ip)
            # Only suggest 'update' if user has started typing an argument
            [[ $COMP_CWORD -gt 1 ]] && COMPREPLY=( $(compgen -W "$ip_args" -- "$cur") )
            ;;
        name)
            [[ $COMP_CWORD -gt 1 ]] && COMPREPLY=( $(compgen -W "$name_args" -- "$cur") )
            ;;
        gui|dashboard|status)
            COMPREPLY=()  # No completions
            ;;
        *)
            COMPREPLY=()  # Unknown command fallback
            ;;
    esac
}

# --- Register the completion function ---
complete -F _miro_completion miro
